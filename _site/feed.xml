<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-21T13:39:10+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">My thoughts about iOS</title><subtitle>My thoughts about iOS</subtitle><author><name>Óscar Garrucho</name><email>oscar.garrucho@gmail.com</email></author><entry><title type="html">Creando Share Extensions con Swift</title><link href="http://localhost:4000/2018-03-21/Creando-Share-Extensions-con-Swift" rel="alternate" type="text/html" title="Creando Share Extensions con Swift" /><published>2018-03-21T17:04:22+01:00</published><updated>2018-03-21T17:04:22+01:00</updated><id>http://localhost:4000/2018-03-21/Creando-Share-Extensions-con-Swift</id><content type="html" xml:base="http://localhost:4000/2018-03-21/Creando-Share-Extensions-con-Swift">&lt;p&gt;Si tu app usa algún tipo de archivo como imágenes, PDF o archivos en general, para su uso interno o como parte de una funcionalidad, seguramente necesitarás utilizar extensiones en tu aplicación para llevarla al siguiente nivel, pero ¿qué son las extensiones en iOS?&lt;/p&gt;

&lt;p&gt;Con la llegada de iOS 8, Apple introdujo las conocidas &lt;a href=&quot;https://developer.apple.com/app-extensions&quot;&gt;App Extensions&lt;/a&gt;, una nueva forma de interactuar con una aplicación sin llegar a lanzarla. Podemos compartir archivos de una app a otra, o incluso modificar un archivo en una tercera app y obtenerla nuevamente ya modificada en nuestra aplicación, como ejemplos más significativos. Aunque la arquitectura de iOS (muy segura) impide el uso de código malicioso de terceras aplicaciones, el uso de extensiones dentro de nuestras propias aplicaciones puede llegar a ser un auténtico dolor de cabeza.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mr_T.gif&quot; alt=&quot;ShareExtension01&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Las extensiones no son una aplicación “independiente” de nuestra app; añaden una funcionalidad extra a nuestra app de forma eficiente y centrada en una sola y única tarea. Los tipos existentes de extensiones son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Today&lt;/code&gt;: Una extensión que se muestra en la vista “Hoy” del Centro de Notificaciones que muestra información breve y permite realizar tareas rápidas y sencillas.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Share&lt;/code&gt;: Una extensión que permite que su aplicación comparta (o reciba) contenido con usuarios en las redes sociales y otros servicios similares para compartir&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt;: Una extensión que permite la creación de botones de acción personalizados en una vista predefinida para permitir a los usuarios ver o transformar el contenido que se origina en una tercera aplicación.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Photo Editing&lt;/code&gt;: Una extensión que permite a los usuarios editar una foto o un video dentro de la aplicación Fotos&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Document Provider&lt;/code&gt;: Una extensión utilizada para permitir que otras aplicaciones accedan a los documentos administrados por su aplicación&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Custom Keyboard&lt;/code&gt;: Una extensión que reemplaza el teclado del sistema&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/shareextension/image_12.png&quot; alt=&quot;ShareExtension02&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En el ejemplo de hoy veremos como crear una “Share extension” para recibir archivos desde otras aplicaciones a la nuestra. Para ellos &lt;a href=&quot;https://github.com/oskarko/ShareExtensionExample&quot;&gt;crearemos un proyecto de prueba&lt;/a&gt; donde añadiremos un “tableView” para poder mostrar los archivos que contiene nuestra aplicación en su carpeta interna.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/shareextension/image_01.png&quot; alt=&quot;ShareExtension03&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora necesitaremos añadir una extensión a nuestro proyecto. Para ello iremos a “File » New » Target…” y seleccionaremos una “Share Extension”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/shareextension/image_02.png&quot; alt=&quot;ShareExtension04&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tendremos que ponerle un nombre fácil de reconocer desde otras aplicaciones:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/shareextension/image_03.png&quot; alt=&quot;ShareExtension05&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;… y te pedirá confirmación para activar la extensión que acabas de crear, dile que “sí” (Activate)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/shareextension/image_04.png&quot; alt=&quot;ShareExtension06&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Verás que ha aparecido una clase “ShareViewController” que &lt;code class=&quot;highlighter-rouge&quot;&gt;NO&lt;/code&gt; hereda de UIViewController tal que así:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShareViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SLComposeServiceViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isContentValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NSExtensionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attachments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didSelectPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selects&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upload&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NSExtensionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attachments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    
        &lt;span class=&quot;nf&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Inform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'re done, so it un-blocks its UI. Note: Alternatively you could call super'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didSelectPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;similarly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extensionContext!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;completeRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;returningItems: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;completionHandler: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurationItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;via&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SLComposeSheetConfigurationItem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Practicamente borraremos todo esto y crearemos nuestra propia “ShareViewController” personalizada, aunque para eso, primero deberemos de personalizar el Storyboard asociado a esta clase. En mi caso, he borrado casi todo lo que venía por defecto y lo he dejado a mi gusto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/shareextension/image_05.png&quot; alt=&quot;ShareExtension07&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez tengamos la vista, es hora de añadirle código a nuestra extensión. Lo primero será definir qué tipo de archivos vamos a aceptar en nuestra aplicación, así que abriremos el archivo “Info.plist” de la extensión y sustituiremos este código:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NSExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;NSExtensionAttributes&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NSExtensionActivationRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/key&amp;gt;
            &amp;lt;string&amp;gt;TRUEPREDICATE&amp;lt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/dict&amp;gt;
        &amp;lt;key&amp;gt;NSExtensionMainStoryboard&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MainInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/string&amp;gt;
        &amp;lt;key&amp;gt;NSExtensionPointIdentifier&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/string&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;que viene a significar que acepta cualquier archivo. Pero nosotros no queremos todos los archivos posibles, sólo cogeremos archivos tipo PDF, docx, xlsx… por tanto sustituiremos el código anterior por este otro:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NSExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;NSExtensionAttributes&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NSExtensionActivationRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/key&amp;gt;
            &amp;lt;dict&amp;gt;
                &amp;lt;key&amp;gt;NSExtensionActivationSupportsFileWithMaxCount&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/integer&amp;gt;
                &amp;lt;key&amp;gt;NSExtensionActivationSupportsWebURLWithMaxCount&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/integer&amp;gt;
            &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/dict&amp;gt;
        &amp;lt;key&amp;gt;NSExtensionMainStoryboard&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MainInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/string&amp;gt;
        &amp;lt;key&amp;gt;NSExtensionPointIdentifier&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/string&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;que significa que aceptaremos archivos desde una URL (por ejemplo, desde Dropbox) o adjuntos en mensajes de Mail. Ahora entraremos en detalle sobre el resto del código de la extensión. Primero haremos que herede de UIViewController y añadiremos un método “importFile” que contendrá código similar al siguiente&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extensionContext!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inputItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NSExtensionItem&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textItemProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attachments!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NSItemProvider&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kUTTypeContent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attachment&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kUTTypeURL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;
        
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;others&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textItemProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hasItemConformingToTypeIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;textItemProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;forTypeIdentifier: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;options: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;completionHandler: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileURL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    
                    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containerURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;containerURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;forSecurityApplicationGroupIdentifier: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;group.oscargarrucho.myapp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containerURL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        
                        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lastPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replacingOccurrences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;of: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;fileURLWithPath: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fileContainer.path)/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fileName)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;isDirectory: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        
                        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            
                            &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copyItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;at: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;presentAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;kp&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Primeramente identificamos qué tipo de archivos esperamos encontrar&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kUTTypeContent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Para después, mediante un ItemProvider cargar el archivo que hemos recibido en nuestra “Share Extension” y copiarlo en la carpeta compartida que tiene nuestra extensión y nuestra aplicación principal, para cuando lanzemos nuestra aplicación, lea esta carpeta compartida en busca de los archivos importados desde otras aplicaciones. Una vez copiado el archivo a dicha carpeta compartida, mostraremos un UIAlertController para notificarlo al usuario y salir de la extensión&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presentAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UIAlertController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;My App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Your document has been imported correctly&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;preferredStyle: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UIAlertControllerStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancelAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UIAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;style: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UIAlertActionStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UIAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extensionContext?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;completeRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;returningItems: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;completionHandler: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alertController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancelAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;animated: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;completion: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;como curiosidad, mirad que para retroceder y abandonar el ViewController actual no usamos un &lt;code class=&quot;highlighter-rouge&quot;&gt;dismiss&lt;/code&gt; como normalmente hacemos, en su lugar usamos&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extensionContext?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;completeRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;returningItems: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;completionHandler: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;para abadonar el ViewController de nuestra extensión. Curioso, eh? De igual modo que con ese código podremos coger los archivos que nos importen desde archivos en local (como archivos adjuntos en Mail), modificando levemente ese código podremos descargar archivos desde DropBox e importarlos también en nuestra aplicación. &lt;a href=&quot;https://github.com/oskarko/ShareExtensionExample&quot;&gt;No olvides echar un vistazo a nuestro proyecto para ver como hacer esto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/matrix_01.gif&quot; alt=&quot;ShareExtension08&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aquí solo nos queda habilitar los grupos entre nuestra aplicación y nuestra extensión para poder compartir los archivos entre ellas. Para ello iremos a la pestaña “Capabilities” y habilitaremos la opción “App Groups” en ambas. Desde el traget de nuestra aplicación crearemos un “App Groups” (suele ponerse “group.” más el mismo bundle que usamos en la app). Una vez creada, deberemos añadirlo también en la extensión.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/shareextension/image_06.png&quot; alt=&quot;ShareExtension09&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listo, nuestra app ya tiene una “Share Extension” para importar archivos… ahora veremos cómo leerlos desde el ViewController de nuestra app.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;for: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;documentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;in: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;userDomainMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documentsDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containerURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;containerURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;forSecurityApplicationGroupIdentifier: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;group.oscargarrucho.myapp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containerURL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryContentsGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isDir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ObjCBool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;directoryContentsGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contentsOfDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;at: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;includingPropertiesForKeys: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;options: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;directoryContentsGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contentsOfDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;at: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;includingPropertiesForKeys: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contentModificationDateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;skipsHiddenFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryContentsGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    
                    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;going&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imported&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here!&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fileExists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;atPath: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;isDirectory: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;boolValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lastPathComponent&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appGroupshared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;fileURLWithPath: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fileContainer.path)/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fileName)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;isDirectory: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copiedFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;fileURLWithPath: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;documentsDirectory.path)/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fileName)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;isDirectory: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            
                            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fileExists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;atPath: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appGroupshared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AppGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copyItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;at: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appGroupshared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copiedFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;atPath: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appGroupshared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;kp&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getAllFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En nuestro ViewController tenemos un método “refresh” para leer los archivos que existan en la carpeta compartida con la extensión y copiarlos a la carpeta interna de la aplicación. Si se ha copiado bien, borraremos el archivo en la carpeta compartida puesto que ya no nos sirve. Después llamaremos a otro método, en este caso “getAllFiles()” para leer todos los archivos de nuestra carpeta interna y pintarlos en el tableView. Cómo hacer eso no entra dentro del objetivo de este post lo he omitido para no hace muy larga esta lectura, pero te recuerdo que &lt;a href=&quot;https://github.com/oskarko/ShareExtensionExample&quot;&gt;tienes el proyecto que estoy usando a modo de ejemplo colgado en Github&lt;/a&gt; para que le eches un ojo si te apetece. El resultado final sería algo así:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/shareextension/image_11.png&quot; alt=&quot;ShareExtension11&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Consideraciones a tener en cuenta:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El “Deployment Target” debe de ser el mismo en nuestra aplicación y en nuestra “Share Extension”.&lt;/li&gt;
  &lt;li&gt;De cara a subir un binario al &lt;code class=&quot;highlighter-rouge&quot;&gt;AppStore&lt;/code&gt;, el &lt;code class=&quot;highlighter-rouge&quot;&gt;Version&lt;/code&gt; y el &lt;code class=&quot;highlighter-rouge&quot;&gt;Build&lt;/code&gt; de nuestra extensión deben coincidir con el &lt;code class=&quot;highlighter-rouge&quot;&gt;Version&lt;/code&gt; y el &lt;code class=&quot;highlighter-rouge&quot;&gt;Build&lt;/code&gt; de la aplicación de la siguiente forma: el bundle version de la extensión debe ser igual al build de nuestra aplicación, y el bundle version string, short igual al Version de nuestra aplicación.&lt;/li&gt;
  &lt;li&gt;Es muy fácil olvidarse de habilitar “App Groups”, ¿seguro que lo has revisado?&lt;/li&gt;
  &lt;li&gt;Debido a la inestabilidad de XCode (9) es fácil que tengas algún tipo de conflicto mientras preparas tu extensión. Un “Clean” + “Build” te harán la vida mucho más fácil.&lt;/li&gt;
  &lt;li&gt;Si realmente lo necesitas, desde tu extensión puedes lanzar tu aplicación mediante &lt;a href=&quot;https://www.appcoda.com/working-url-schemes-ios&quot;&gt;el uso de URL Schemes&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Las “UserDefaults” no se comparten entre tu aplicación y tu extensión, para ello puedes usar las UserDefaults de Grupos tal que así:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NSUserDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;suiteName: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;group.com.oscargarrucho.shareextensions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;April&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;forKey: &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monthSelected&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NSUserDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;suiteName: &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;oscargarrucho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shareextensions&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;objectForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monthSelected&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Las imágenes que añadas a tus Assets no se cargarán por defecto en tus extensiones. Debes de habilitar el “Target Membership” por cada imagen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/shareextension/image_08.png&quot; alt=&quot;ShareExtension10&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Puedes descargar el proyecto completo desde &lt;a href=&quot;https://github.com/oskarko/ShareExtensionExample&quot;&gt;mi repositorio de GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding! :)&lt;/p&gt;

&lt;p&gt;Bibliografía:&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://www.appcoda.com/ios-8-action-extensions-tutorial&quot;&gt;https://www.appcoda.com/ios-8-action-extensions-tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://blog.intrepid.io/ios-app-extensions&quot;&gt;http://blog.intrepid.io/ios-app-extensions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://developer.apple.com/app-extensions&quot;&gt;https://developer.apple.com/app-extensions&lt;/a&gt;&lt;/p&gt;</content><author><name>Óscar Garrucho</name><email>oscar.garrucho@gmail.com</email></author><category term="iOS" /><category term="Swift" /><summary type="html">Si tu app usa algún tipo de archivo como imágenes, PDF o archivos en general, para su uso interno o como parte de una funcionalidad, seguramente necesitarás utilizar extensiones en tu aplicación para llevarla al siguiente nivel, pero ¿qué son las extensiones en iOS?</summary></entry><entry><title type="html">Configurando UIScrollView con autolayout</title><link href="http://localhost:4000/2018-02-14/Configurando-UIScrollView-con-autolayout" rel="alternate" type="text/html" title="Configurando UIScrollView con autolayout" /><published>2018-02-14T15:23:22+01:00</published><updated>2018-02-14T15:23:22+01:00</updated><id>http://localhost:4000/2018-02-14/Configurando-UIScrollView-con-autolayout</id><content type="html" xml:base="http://localhost:4000/2018-02-14/Configurando-UIScrollView-con-autolayout">&lt;p&gt;Como desarrollador de iOS he visto en más de una ocasión a compañeros sufriendo con el uso de los scrollView. Desde soluciones poco elegantes hasta acabados poco funcionales, pasando por mil y una soluciones poco o nada aconsejables. En este pequeño post os mostraré como lo hago yo, de una forma sencilla y fácil de manejar. Y podréis darle toda la altura que necesitéis.&lt;/p&gt;

&lt;p&gt;Lo primero que haremos es crear un proyecto a modo de ejemplo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/UIScrollView01.png&quot; alt=&quot;UIScrollView01&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sobre el ViewController que ya tenemos en nuestro storyBoard añadiremos un UIScrollView:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/UIScrollView02.png&quot; alt=&quot;UIScrollView02&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Usaremos autolayout para ajustar todas las constraints a la vista superior:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/UIScrollView03.png&quot; alt=&quot;UIScrollView03&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora añadiremos un UIView (al que llamaremos “Background View”) al interior de nuestro scrollView. Deberemos de tener nuestro único ViewController como en la imagen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/UIScrollView04.png&quot; alt=&quot;UIScrollView04&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A este UIView (al que hemos llamado “Background View”) le añadiremos constraints para ajustarlo por completo al scrollView:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/UIScrollView03.png&quot; alt=&quot;UIScrollView05&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;** Súper importante ** A nuestro “Background View” le añadiremos un par de constraints más: “Equal Heights” y “Equal Widths” con la UIView superior de nuestro ViewController:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/UIScrollView06.png&quot; alt=&quot;UIScrollView06&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y a esta constraint de altura que acabamos de añadir deberemos de colocarle la prioridad baja (250):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/UIScrollView07.png&quot; alt=&quot;UIScrollView07&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;¡Listo! Ahora podemos añadir tantos elementos al interior de nuestro scrollView como necesitemos, y funcionará maravillosamente igual de bien con todos ellos. No olvidéis añadir constraints a los elementos que vayáis añadiendo al interior del scrollView para que se muestren tal y como queréis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/UIScrollView08.png&quot; alt=&quot;UIScrollView08&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Por si tenéis alguna duda, &lt;a href=&quot;https://github.com/oskarko/UIScrollViewExample&quot;&gt;aquí os dejo un proyecto a modo de ejemplo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/UIScrollView09.gif&quot; alt=&quot;UIScrollView09&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Happy coding! :)&lt;/p&gt;</content><author><name>Óscar Garrucho</name><email>oscar.garrucho@gmail.com</email></author><category term="iOS" /><category term="Swift" /><summary type="html">Como desarrollador de iOS he visto en más de una ocasión a compañeros sufriendo con el uso de los scrollView. Desde soluciones poco elegantes hasta acabados poco funcionales, pasando por mil y una soluciones poco o nada aconsejables. En este pequeño post os mostraré como lo hago yo, de una forma sencilla y fácil de manejar. Y podréis darle toda la altura que necesitéis.</summary></entry><entry><title type="html">Desempaquetando valores opciones en Swift 3.0 - Guard let vs If let</title><link href="http://localhost:4000/2017-05-20/Desempaquetando-valores-opcionales-en-Swift-3.0-Guard-let-vs-If-let" rel="alternate" type="text/html" title="Desempaquetando valores opciones en Swift 3.0 - Guard let vs If let" /><published>2017-05-20T19:04:22+02:00</published><updated>2017-05-20T19:04:22+02:00</updated><id>http://localhost:4000/2017-05-20/Desempaquetando-valores-opcionales-en-Swift-3.0-Guard-let-vs-If-let</id><content type="html" xml:base="http://localhost:4000/2017-05-20/Desempaquetando-valores-opcionales-en-Swift-3.0-Guard-let-vs-If-let">&lt;p&gt;Cuando comienzas a escribir código como programador iOS necesitas flexibilidad: poder usar vars o lets (variables o constantes), classes o structs (clases o estructuras), sets o arrays… Independientemente de su funcionalidad, poder elegir entre diferentes soluciones es súper importante para poder llegar a ser un mejor programador, en cuanto a productividad se refiere.&lt;/p&gt;

&lt;p&gt;Desempaquetar valores opciones no es una excepción.&lt;/p&gt;

&lt;p&gt;Seguramente ya estarás familiarizado con la comprobación y desempaquetado de valores opcionales mediante la sintaxis “if let” a la hora de desempaquetar un valor opcional. Dicha sintaxis nos permite desempaquetar un valor opcional de forma segura y muy sencilla cuando el valor opcional contiene un valor, y si no lo contiene, simplemente no ejecuta el bloque de código existente dentro del “if let”. Simplemente lo colocas, y te centras en el código que se debe ejecutar únicamente cuando tengamos un valor dentro del valor opcional.&lt;/p&gt;

&lt;p&gt;Por tanto, ¿Por qué deberíamos usar otra sintaxis si “if let” funciona maravillosamente bien?, pues por lo que he escrito en el primer párrafo: para ser mejores programadores. Cuanto más simple, claro y sencillo sea nuestro código, más mantenible podrá ser.&lt;/p&gt;

&lt;p&gt;Veamos el siguiente ejemplo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/guardletviewcontroller.png&quot; alt=&quot;GuardLetViewController&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Es una sencilla aplicación para iOS donde solicitaremos al usuario varios datos personales mediante “textFields” para posteriormente mostrarlos en una única “label”. Los valores que se obtienen de estos “textfields” son valores opcionales, por lo que tendremos que desempaquetarlos previamente antes de poder mostrarlos en la “label”.&lt;/p&gt;

&lt;p&gt;La manera más sencilla que se nos podría ocurrir sería algo así:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/guardletviewcontroller1.png&quot; alt=&quot;GuardLetViewController1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aunque funciona bien, queda un poco engorroso con tantos if anidados, ¿no? ¿Qué pasaría si tuviésemos diez IF más? Sería un poco enredado su mantenimiento y escalabilidad. Podríamos usar una pequeña variación para no andar anidando los IF: (usando return con cada if-let)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/guardletviewcontroller2.png&quot; alt=&quot;GuardLetViewController2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Se ve un poco más claro y sencillo que el anterior pero los valores opcionales desempaquetados sólo podrán ser usados dentro de sus correspondientes “if let”, si queremos usarlos posteriormente tendremos que volver a desempaquetarlos, por tanto, no parece una opción muy eficiente.&lt;/p&gt;

&lt;p&gt;Ahora intentaremos reescribir el código nuevamente usando “guard let”, que fue una de las mejoras que se introdujo con la llegada de Swift 2.0, en lugar de “if let”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/guardletviewcontroller3.png&quot; alt=&quot;GuardLetViewController3&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De esta forma nuestro código se ve más legible y fácil de mantener, ¿verdad? Y estos dos factores son muy importantes, sobre todo si trabajamos en equipo con otros programadores. Además, usando “guard let” nos ahorramos todas las anidaciones que vimos en el primer ejemplo de “if let”. Y lo que hace realmente valioso a “guard let” (y a diferencia de “if let”) es que los valores opcionales que desempaquetamos seguirán estando desempaquetados para el resto del bloque de código, incluso fuera del “guard let”.&lt;/p&gt;

&lt;p&gt;Podemos optimizar el código aún más todavía sin perder claridad&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/guardletviewcontroller4.png&quot; alt=&quot;GuardLetViewController4&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nota: Dentro de cada “guard let” debemos de tener obligatoriamente un elemento de control de flujo, bien sea un simple return, un break o un continue (Ojo! recuerda que tanto break como continue se usan para bucles, y return para funciones).&lt;/p&gt;

&lt;p&gt;Podemos probar todos estos conceptos fácilmente en “Playground”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/guardletviewcontroller5.png&quot; alt=&quot;GuardLetViewController5&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/guardletviewcontroller6.png&quot; alt=&quot;GuardLetViewController6&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Usando “guard” podemos mejorar la calidad de nuestro código, con una mejor lectura y un mantenimiento más sencillo. Todo va a depender finalmente de nuestros gustos a la hora de elegir entre “if let” o “guard let”. Pero de nuestra flexibilidad como programadores dependerá nuestra productividad final.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DBZ_05.gif&quot; alt=&quot;Goku_Napa&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eso sí, no debemos caer en el error de querer usar “guard let” en todo momento que nos sea posible. Los extremos siempre son malos. Lo ideal es no sustituir sentencias sencillas de IF-ELSE mediante “guard let”, con ello el código se hará más engorroso nuevamente a la hora de leerlo.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Don&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;t:
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Oscar&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;



    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Better&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Oscar&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Y tampoco se recomienda su uso para sustituir sentencias IF-ELSE más conplejas. Además, y ya para terminar, no se recomienda escribir dentro de la cláusula ELSE del “guard let” más de una o dos líneas. Si realmente tienes que escribir un bloque de código complejo te encuentras en la situación anterior.&lt;/p&gt;

&lt;p&gt;Bibliografía:&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://medium.com/@mimicatcodes/unwrapping-optional-values-in-swift-3-0-guard-let-vs-if-let-40a0b05f9e69&quot;&gt;https://medium.com/@mimicatcodes/unwrapping-optional-values-in-swift-3-0-guard-let-vs-if-let-40a0b05f9e69&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://radex.io/swift/guard/&quot;&gt;http://radex.io/swift/guard/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://andybargh.com/the-swift-guard-statement/&quot;&gt;https://andybargh.com/the-swift-guard-statement/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309&quot;&gt;The Swift Programming Language (Swift 3.1)&lt;/a&gt;&lt;/p&gt;</content><author><name>Óscar Garrucho</name><email>oscar.garrucho@gmail.com</email></author><category term="iOS" /><category term="Swift" /><summary type="html">Cuando comienzas a escribir código como programador iOS necesitas flexibilidad: poder usar vars o lets (variables o constantes), classes o structs (clases o estructuras), sets o arrays… Independientemente de su funcionalidad, poder elegir entre diferentes soluciones es súper importante para poder llegar a ser un mejor programador, en cuanto a productividad se refiere.</summary></entry><entry><title type="html">CocoaPods, tu gestor de dependencias favorito</title><link href="http://localhost:4000/2017-03-22/CocoaPods-tu-gestor-de-dependencias-favorito" rel="alternate" type="text/html" title="CocoaPods, tu gestor de dependencias favorito" /><published>2017-03-22T20:04:22+01:00</published><updated>2017-03-22T20:04:22+01:00</updated><id>http://localhost:4000/2017-03-22/CocoaPods-tu-gestor-de-dependencias-favorito</id><content type="html" xml:base="http://localhost:4000/2017-03-22/CocoaPods-tu-gestor-de-dependencias-favorito">&lt;p&gt;CocoaPods es un gestor de dependencias para tu proyecto de Xcode. Es tan fácil como especificar qué dependencias necesitas en un sencillo archivo de texto plano. Es capaz de mantener las dependencias entre las distintas librerías que añades y ‘mergear’ el código fuente de las distintas dependencias. A fecha de escribir esto &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods&quot;&gt;va por la versión 1.2.0&lt;/a&gt; (rama estable).&lt;/p&gt;

&lt;p&gt;¿Por qué necesitas un gestor de dependencias en tu vida? Bueno, no es obligatorio su uso, pero, podrías dedicar tu valioso tiempo a mejorar tu código en lugar de, sencillamente, malgastar tiempo en escribir cientos de líneas de código que no necesitarías escribir. También es cierto que puedes hacer uso de terceras librerías sin necesidad de usar un gestor de dependencías, pero eso te seguiría haciendo perder mucho tiempo tanto en la búsqueda, instalación y en el mantenimiento de dichas librerías (o eliminación de las mismas). Por tanto, la razón principal es obiva: por tiempo. Y como todos sabemos, el tiempo es oro, así que no lo malgastes ;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pulp_01.gif&quot; alt=&quot;Tiempo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;instalando&quot;&gt;Instalando…&lt;/h3&gt;

&lt;p&gt;CocoaPods está hecho con Ruby, y por tanto, para instalarlo &lt;strong&gt;necesitamos tener instalado Ruby&lt;/strong&gt; en nuestro Max OS X; pero no sufras, que viene por defecto instalado con todas las versiones de OS X desde la versión 10.7.&lt;/p&gt;

&lt;p&gt;Abre una terminal e introduce el siguiente comando (necesitarás introducir tu password para dar permisos de instalación)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cocoapods&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ruby instalará todas las &lt;strong&gt;gemas&lt;/strong&gt; que sean necesarias para lograr la correcta instalación de CocoaPods.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/confetti_03.png&quot; alt=&quot;Tiempo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos diera algún tipo de error, o si incluso de quedara congelada la instrucción, sería súper recomendable actualizar a la versión mas reciente de Ruby Gems:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Además, desde la propia CocoaPods nos recomiendan tener instalada la &lt;code class=&quot;highlighter-rouge&quot;&gt;Command Line Tools&lt;/code&gt; (Xcode » Preferences » Downloads » Command Line Tools)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¡Instalado!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;configurando-un-nuevo-proyecto-con-cocoapods&quot;&gt;Configurando un nuevo proyecto con CocoaPods…&lt;/h3&gt;

&lt;p&gt;Para nuestro proyecto de ejemplo, tan sólo le añadiremos una divertida librería con la ayuda de CocoaPods, más que suficiente para ver como es su configuración y funcionamiento en tiempo de ejecución. Aquí cabe mencionar que todos los Pods que podemos usar en nuestro proyecto deben de estar “dados de alta” en el repositorio de &lt;a href=&quot;http://github.com/CocoaPods/Specs&quot;&gt;Github que CocoaPods tiene&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/SAConfettiView&quot;&gt;La librería&lt;/a&gt; permite soltar confetti por toda la pantalla de nuestro dispositivo, a modo de celebración de algún logro o día festivo. Tan bonito como simple.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/confetti_01.png&quot; alt=&quot;Confetti&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos allá! Nuevamente en una terminal deberemos situarnos en la carpeta raíz de nuestro proyecto (justo donde tenemos el archivo &lt;nombreProyecto&gt;.xcodeproj)&lt;/nombreProyecto&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Path/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;To&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Folder&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Y desde allí ejecutamos el siguiente comando:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;esto creará &lt;a href=&quot;https://guides.cocoapods.org/using/the-podfile.html&quot;&gt;nuestro Podfile&lt;/a&gt; en el directorio raíz del proyecto. Comenzaremos a editarlo (podéis editarlo con vuestro editor de texto plano favorito, yo suelo usar &lt;strong&gt;vi&lt;/strong&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;vi&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Podfile&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;y por defecto veremos algo parecido a esto:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;c1&quot;&gt;# Uncomment this line to define a global platform for your project&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'8.0'&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'CocoaPodsDemo'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  		&lt;span class=&quot;c1&quot;&gt;# Comment this line if you're not using Swift and don't want to use dynamic frameworks&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;use_frameworks!&lt;/span&gt;

  	&lt;span class=&quot;c1&quot;&gt;# Pods for CocoaPodsDemo&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SAConfettiView&quot;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;la primera línea indica a CocoaPods que tu librería funcionará a partir de la versión 8.0 de iOS. La línea &lt;code class=&quot;highlighter-rouge&quot;&gt;use_frameworks!&lt;/code&gt; es obligatoria si vienes programando en Swift, de lo contrario, obtendrás un error al intentar usar el Pod sin esta línea. Y con la línea &lt;code class=&quot;highlighter-rouge&quot;&gt;pod SAConfettiView&lt;/code&gt; le decimos a CocoaPods que busque, compile e instale la librería llamada SAConfettiView.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/year_01.gif&quot; alt=&quot;Buzz&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;un-alto-en-el-camino&quot;&gt;Un alto en el camino…&lt;/h3&gt;

&lt;p&gt;Referirse a las librerías de Swift como librerías propiamente dicho, es un error. Cuando escribo librerías refiriendo al lenguaje Swift en verdad estoy refiriéndome a framworks, o para ser más exactos &lt;strong&gt;“Swift dynamic framework”&lt;/strong&gt;, porque las librerías (estáticas) en Swift simplemente no están permitidas. Entonces, ¿Cuál es la diferencia entre una librería, un framework y un CocoaPod? Bien, espero arrojar algo de luz sobre este asunto:&lt;/p&gt;

&lt;p&gt;– CocoaPod (o ‘Pod’, usado de forma abreviada) se refiere indistintamente a una librería o un framework que se ha añadido a tu proyecto mediante la herramienta CocoaPods.&lt;/p&gt;

&lt;p&gt;– “dynamic frameworks” (o framworks, simple y llanamente) fueron introducidos con la llegada de iOS 8, permitiendo además de código, adjuntar imágenes y otros tipos de &lt;strong&gt;assets&lt;/strong&gt; que hasta entonces, no se podía. Otra sustancial diferencia es que en los frameworks tenemos “namespace classes” que viene a lograr que Xcode use dos clases con nombres idénticos (de distintos frameworks) sin dar errores de símbolos duplicados en proyecto. Esto es debido a que, a diferencia de Objetive-C, los frameworks escritos en Swift no están incluidos en iOS evitando duplicados como bien ya sabes.&lt;/p&gt;

&lt;p&gt;Y de todo esto se encarga CocoaPods por ti, en las sombras, sin que tú te enteres lo más mínimo. &lt;strong&gt;Genial, ¿eh?&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;volviendo-a-nuestro-proyecto&quot;&gt;Volviendo a nuestro proyecto&lt;/h3&gt;

&lt;p&gt;Hemos especificado &lt;del&gt;la librería&lt;/del&gt; el framework que queremos importar sin indicarle la versión, eso hará que CocoaPods nos instale la última versión estable disponible. Si quisiéramos indicarle una versión en concreto, deberíamos colocarla en el pod de la siguiente manera:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SAConfettiView'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~&amp;gt; 1.0'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Y eso le indicaría a CocoaPods que descargase únicamente la versión 1.0 o cualquier otra versión superior hasta la 1.1 sin incluir la 1.1 del pod que le estamos indicando. Todo el tema de las versiones lo tienen muy bien explicado los compañeros de &lt;a href=&quot;https://www.kodigoswift.com/tutorial-cocoapods-instalacion-y-gestion-de-dependencias/&quot;&gt;kodigoswift.com&lt;/a&gt;, échale un vistazo ;) .Guarda y cierra. Ahora es el momento de decirle a CocoaPods que descargue e instale las dependencias de tu proyecto. Para eso, nuevamente en la terminal, cerciorándonos de que estamos en el directorio raíz del proyecto, escribimos el siguiente comando:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Verás algo parecido a esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/confetti_05.png&quot; alt=&quot;Final&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora, en la carpeta raíz del proyecto CocoaPods te ha creado un archivo &lt;nombreProyecto&gt;.xcworkspace además de una carpeta Pods donde guardará todas las dependencias de tu proyecto. A partir de ahora, para abrir el proyecto en Xcode usaremos este archivo &lt;nombreProyecto&gt;.xcworkspace en lugar del original que nos creó el propio Xcode, de lo contrario, obtendremos varios errores.&lt;/nombreProyecto&gt;&lt;/nombreProyecto&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¡Perfecto, acabas de instalar tu primer Pod!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/drac_01.gif&quot; alt=&quot;Drac&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;programando-con-nuestro-primer-pod&quot;&gt;Programando con nuestro primer Pod&lt;/h3&gt;

&lt;p&gt;Si tenías abierto el proyecto en Xcode, ciérralo y ahora abre el archivo &lt;nombreProyecto&gt;.xcworkspace en su lugar. Sólo necesitaremos usar la clase ViewController que viene por defecto en el proyecto, en ella definiremos una variable del tipo &quot;SAConfettiView&quot;:&lt;/nombreProyecto&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;confettiView: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SAConfettiView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Y dentro del método &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; iniciaremos la variable, la adjuntaremos a la vista y ejecutaremos su método para que la lluvia de confetti comience.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;confettiView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SAConfettiView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;frame: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confettiView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;confettiView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startConfetti&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No olvidemos importar la librería justo debajo de la importación de UIKit, de lo contrario… ¡error!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UIKit&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SAConfettiView&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tan fácil como eso. Con esta dependencia - framework - no necesitamos tocar nada de las vistas. Sólo inicializa tu proyecto en el emulador de Xcode y disfruta con el resultado!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/11940172/11791210/f97b6bd8-a2da-11e5-9083-b131fa796373.gif&quot; alt=&quot;confetti&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No olvides que tienes &lt;a href=&quot;https://github.com/oskarko/CocoaPodsDemo&quot;&gt;el proyecto&lt;/a&gt; que hemos venido usando en este ‘post’ en mi respositorio de GitHub ;)&lt;/p&gt;

&lt;h2 id=&quot;bonus&quot;&gt;Bonus:&lt;/h2&gt;

&lt;p&gt;Un breve inciso sobre el mantenimiento de nuestros pods en cualquiera de nuestros proyectos. Tenemos que aprender a diferenciar entre instalar y actualizar nuestros Pods. Cada vez que modificamos nuestro archivo Podfile para añadir o eliminar una dependencia, necesitaremos ejecutar ‘pod install’. Si lo único que pretendemos es usar una versión más actual de algunos de los Pods de nuestro proyecto, deberemos usar ‘pod update’ una vez modificado nuestro Podfile. Hay que recordar que esta “actualización” seguirá los límites que impusimos dentro del Podfile, por tanto, si pusimos&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MyAwesomePodLibrary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~&amp;gt; 2.0'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;CocoaPods intentará actualizar nuestra dependencia, pero nunca con una versión 2.0 o superior. Y por último, el comando ‘pod outdated’ listará todas las posibles versiones nuevas a las que podríamos actualizar. Para cualquier otra duda, recomiendo &lt;a href=&quot;https://guides.cocoapods.org/&quot;&gt;la documentación de CocoaPods&lt;/a&gt;, es increíblemente buena.&lt;/p&gt;

&lt;p&gt;Bibliografía:&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://www.raywenderlich.com/97014/use-cocoapods-with-swift&quot;&gt;https://www.raywenderlich.com/97014/use-cocoapods-with-swift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://www.migueldiazrubio.com/desarrollo-ios-gestionar-dependencias-con-cocoapods/&quot;&gt;http://www.migueldiazrubio.com/desarrollo-ios-gestionar-dependencias-con-cocoapods/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://www.kodigoswift.com/tutorial-cocoapods-instalacion-y-gestion-de-dependencias/&quot;&gt;https://www.kodigoswift.com/tutorial-cocoapods-instalacion-y-gestion-de-dependencias/&lt;/a&gt;&lt;/p&gt;</content><author><name>Óscar Garrucho</name><email>oscar.garrucho@gmail.com</email></author><category term="iOS" /><category term="Swift" /><category term="CocoaPods" /><summary type="html">CocoaPods es un gestor de dependencias para tu proyecto de Xcode. Es tan fácil como especificar qué dependencias necesitas en un sencillo archivo de texto plano. Es capaz de mantener las dependencias entre las distintas librerías que añades y ‘mergear’ el código fuente de las distintas dependencias. A fecha de escribir esto va por la versión 1.2.0 (rama estable).</summary></entry><entry><title type="html">Patrón MVP y test unitarios</title><link href="http://localhost:4000/2016-11-19/Patron-MVP-y-test-unitarios" rel="alternate" type="text/html" title="Patrón MVP y test unitarios" /><published>2016-11-19T22:04:22+01:00</published><updated>2016-11-19T22:04:22+01:00</updated><id>http://localhost:4000/2016-11-19/Patron-MVP-y-test-unitarios</id><content type="html" xml:base="http://localhost:4000/2016-11-19/Patron-MVP-y-test-unitarios">&lt;p&gt;He decidido dividir esta entrada en dos entradas diferentes para que no fuese extremadamente larga y aburrida de leer. En esta primera entrada os hablaré sobre el &lt;strong&gt;patrón MVP y los test unitarios&lt;/strong&gt;, tan olvidados como necesarios.&lt;/p&gt;

&lt;p&gt;A diferencia del &lt;code class=&quot;highlighter-rouge&quot;&gt;patrón MVC&lt;/code&gt;, el &lt;code class=&quot;highlighter-rouge&quot;&gt;patrón MVP&lt;/code&gt; intenta desacoplar tanto como pueda el uso del framework de Android, facilitando así los test unitarios. MVP aporta independencia del framework de Android.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MVP-Android1.png&quot; alt=&quot;modelView&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Las vistas quedan unicamente para recibir la interacción del usuario con la aplicación y mostrar en pantalla los cambios asociados a esas interacciones previas (si pulso un botón, muestra un Toast…). Las vistas son las Activity y los Fragment propiamente dicho.&lt;/p&gt;

&lt;p&gt;El presenter es una capa intermedia que desacopla la lógica de la aplicación de las vistas. Actúa como intermediario entre las vistas y los casos de uso (los modelos). Recibe los datos provenientes de los modelos y los prepara para pasarlos a las vistas.&lt;/p&gt;

&lt;p&gt;Los modelos son los casos de uso de la propia aplicación (llamadas a la API, CRUD sobre BBDD, etc), es decir, la lógica de negocio de la aplicación. Lo ideal y lo recomendable es que sólo exista un modelo por cada caso de uso de la aplicación para una mayor escalabilidad de la aplicación (&lt;a href=&quot;http://www.genbetadev.com/paradigmas-de-programacion/solid-cinco-principios-basicos-de-diseno-de-clases&quot;&gt;principios SOLID&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Para la realización de los test unitarios de un modo más simple es ideal el uso de interfaces con las vistas. Aunque &lt;a href=&quot;https://gist.github.com/pedrovgs/61a8301a9952d195081edc989aa1fd41&quot;&gt;hay quien no es partidario de ello.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para sacar el máximo partido a este patrón de diseño se suele usar la inyección de dependencias, pero eso lo veremos en otro momento. Por ahora &lt;strong&gt;será la propia actividad la encargada de proporcionar las dependencias&lt;/strong&gt; al presenter. Veremos &lt;a href=&quot;https://github.com/oskarko/MVP-Pattern-Example&quot;&gt;un ejemplo sencillo&lt;/a&gt;. En lugar de crear las dependencias que necesitamos para realizar una determinada tarea, estas dependencias vendrán dadas (inyectadas) en el constructor o en algunos setters(). Así, por ejemplo, el presenter no necesita nunca llamar a getActivity() para conseguir el contexto del framework de Android, sino que éste, por ejemplo, se le pasará en el contructor o en un setter mediante una interfaz. Nuestro presenter no necesita lidiar directamente con el framework, sino con clases que contengan el contexto y que implementen dichas interfaces para hacerlo todo de una forma más abstracta.&lt;/p&gt;

&lt;p&gt;En proyectos grandes es común usar la inyección de dependencias para no complicarnos la vida con las dependencias en gran número. Pero como digo, eso lo veremos en otra entrada…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ventajas&lt;/strong&gt; de usar el Patrón MVP:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;escribir un código más limpio, sin invasión del framework de Android a partir de la capa del presenter.&lt;/li&gt;
  &lt;li&gt;test unitarios más sencillos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;desventajas&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;no existe mucha documentación en lógicas de negocio complejas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/bbt_02.gif&quot; alt=&quot;bigbangt_dos&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ciclo de trabajo del patrón MVP:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;View -&amp;gt; Presenter:&lt;/code&gt; mediante listener los presenter recibirán las interacciones del usuario sobre la interfaz gráfica (UI).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter -&amp;gt; View:&lt;/code&gt; simplemente llamando métodos para actualizar las vistas como por ejemplo setText() o setBackgroundColor().&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter -&amp;gt; Model:&lt;/code&gt; Se solicitará actualizar los datos llamando a setters de los modelos como, por ejemplo, myModel.saveEmail(“oskarko@myemail.com”).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Model -&amp;gt; Presenter:&lt;/code&gt; Normalmente los modelos actualizarán la información realizando llamadas a las distintas API o consultando las bases de datos. Una vez que se han obtenido los datos deseados, se puede notificar al presenter de los nuevos datos mediante métodos de callbacks tales como updateEmail(String email).&lt;/p&gt;

&lt;p&gt;En nuestro &lt;a href=&quot;https://github.com/oskarko/MVP-Pattern-Example&quot;&gt;proyecto de ejemplo&lt;/a&gt; tendremos una vista (&lt;em&gt;activity&lt;/em&gt;) con dos botones, realizando al hacer ‘clic’ sobre cada uno de ellos, una tarea distinta. Por tanto tendremos una vista, un presenter y dos modelos (tantos como casos de uso).
El primer botón realizará una llamada a un servicio web mediante retrofit y mostrará un mensaje según el resultado obtenido. El segundo botón simulará una consulta a una base de datos para rellenar y visualizar una lista con datos ficticios.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MVPApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getNetworkService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MainPresenterImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FindItemsInteractorImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buttonRetrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buttonList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LENGTH_LONG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onItemClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AdapterView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onItemClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Como vemos, la actividad simplemente inicializa el presenter con las dependencias necesarias y pasa al presenter la elección tomada por el usuario en cada acción, o muestra en pantalla los cambios o resultados que el propio presenter le ordenará.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onItemClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Position %d clicked&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;loadRetrofitData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;findItemsInteractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadRetrofitData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;llamada&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;í&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ncrona&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hideProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Respuesta del webService -&amp;gt; userId: %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onFail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hideProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En el presenter, mediante las dependencias inyectadas en el constructor, y con los métodos de callback para obtener las respuestas es donde decidiremos que modelos llamar para conseguir los datos o resultados que más nos interesan en cada momento de la aplicación.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OnFinishedListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Item 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Item 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Item 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Item 4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Item 5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Item 6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Item 7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Item 8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Item 9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;Item 10&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Y en los modelos de la aplicación es donde se contendrá toda la lógica de negocios. En este ejemplo, simulamos rellenar un array como si llamásemos a una base de datos y devolvemos los datos al presenter mediante el listener.&lt;/p&gt;

&lt;p&gt;Puede parecer complicado a primera vista, además del uso de las diferentes interfaces que implementan las vistas, presenters y modelos. Nada más lejos de la realidad, es tan fácil como crear un proyecto vacío e ir programando poco a poco para ver exáctamente como funciona este patrón en concreto. Puedes echarle un vistazo al &lt;a href=&quot;https://github.com/oskarko/MVP-Pattern-Example&quot;&gt;proyecto de ejemplo&lt;/a&gt; para ver realmente como está definido cada cosa. Te sorprenderás gratamente de su simpleza.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/indiana_01.gif&quot; alt=&quot;indiana_jones&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ahora pasemos a hablar un poco sobre los &lt;strong&gt;test unitarios&lt;/strong&gt;. Los test unitarios son el mecanismo que tenemos los programadores para comprobar que nuestros métodos funcionan tal y como deberían de funcionar y devuelven el tipo de dato que deberían de devolver (en caso de devolver alguno). Deberán de ser automatizables, reutilizables, independientes y profesionales. Una de su mayores ventajas es que funcionan a modo de documentación del propio código y en caso de contener algún error en nuestro código, éste queda más acotado y localizable (ojo! el que nuestra aplicación supere todos los test unitarios no significa que esté libre de contener errores).&lt;/p&gt;

&lt;p&gt;Podremos ser muy buenos programadores pero sin la práctica necesaria no seremos capaces de realizar buenos test unitarios por el simple hecho de que es una codificación “diferente”. Además, algunas de las preguntas más recurrentes a la hora de escribir test unitarios es &lt;code class=&quot;highlighter-rouge&quot;&gt;¿Qué debo testear? ¿TODO?&lt;/code&gt; Pues no, no deberemos de comprobar el funcionamiento del propio framework de Android o las librerías externas que usamos en nuestro proyecto, como &lt;strong&gt;retrofit&lt;/strong&gt;, por ejemplo. Puesto que no controlamos ese código; por tanto, deberemos de testear únicamente &lt;strong&gt;nuestro propio código.&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;vi&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkIfShowsMessageOnItemClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onItemClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En este primer test hemos comprobado que al presionar sobre cualquiera de los dos botones de la aplicación se muestra un resultado en pantalla.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;El que tu aplicación supere todos los test unitarios no significa que esté libre de 'bugs', pero de seguro que si no los supera, signifca que algo no está funcionando como debería. Son tan importantes como necesarios.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Existen dos tipos de tests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Prueba unitaria: prueba un único método de una clase. El alcance es muy reducido y está perfectamente acotado. Cualquier dependencia del módulo bajo prueba debe ser sustituida por un mock, o un stub.&lt;/li&gt;
  &lt;li&gt;Prueba de integración: prueba la interacción entre dos o más elementos, que pueden ser clases, módulos, paquetes, subsistemas, etc… incluso la interacción del sistema con el entorno de producción.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para obtener una definición de Mock y Stub, podemos citar lo que &lt;strong&gt;Gerard Meszaros&lt;/strong&gt; definió en su libro &lt;code class=&quot;highlighter-rouge&quot;&gt;XUnit Test Patterns&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Los Stubs, “proporcionan respuestas predefinidas a ciertas llamadas durante los test, sin responder a otra cosa para la que no hayan sido programados”, es decir, los stubs son configurados para que devuelvan valores que se ajusten a lo que la prueba unitaria quiere probar, por lo que se utilizan para verificar el estado de los objetos. Serían por ejemplo el resultado de una consulta a base de datos que puede realizar un modelo.&lt;/p&gt;

&lt;p&gt;Los Mocks, “son objetos preprogramados con expectativas que conforman la especificación de lo que se espera que reciban las llamadas”, es decir, son objetos que se usan para probar que se realizan correctamente llamadas a otros métodos, por ejemplo, a una web API, por lo que se utilizan para verificar el comportamiento de los objetos. Aunque también pueden devolver una respuesta con un estado determinado, su foco se centra más en el análisis del comportamiento. Nos ayudan a testear, por tanto, el paso de mensajes entre objetos.&lt;/p&gt;

&lt;p&gt;Usaremos Robolectric y Mockito para nuestros test unitarios sobre MVP.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;vi&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkIfItemsArePassedToView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;View&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Presenter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hideProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En este segundo test comprobamos que la conexión entre el presenter y la vista funciona sin problemas, y ésta última recibe los datos de forma correcta de parte del presenter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;vi&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkRetrofitCallIsCorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;ArgumentCaptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadRetrofitData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callbackAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comprobaci&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previa&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;callbackAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comprobaciones&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finales&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hideProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;captor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;captor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Respuesta del webService -&amp;gt; userId: %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Realizar test unitarios sobre un IntenService no es nada fácil (&lt;a href=&quot;http://ics.upjs.sk/~novotnyr/blog/1160/one-does-not-simply-test-the-intentservices&quot;&gt;ejemplo&lt;/a&gt;), y es ahí donde radica la belleza de este patrón de diseño. Si modelas bien tu aplicación, no necesitarás usar ningún IntentService. Y como ejemplo, realizaremos una llamada a un webService mediante retrofit de forma totalmente asíncrona sin necesidad de usar ningún intentService. Con el proyecto adjunto sus &lt;a href=&quot;https://github.com/oskarko/MVP-Pattern-Example/blob/master/app/src/test/java/es/org/mvpexample/ExampleUnitTest.java&quot;&gt;correspondientes test unitarios&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/thank_you.gif&quot; alt=&quot;thank_you&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bibliografía:&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://fernandocejas.com/2014/04/08/unit-testing-asynchronous-methods-with-mockito/&quot;&gt;http://fernandocejas.com/2014/04/08/unit-testing-asynchronous-methods-with-mockito/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://www.genbetadev.com/paradigmas-de-programacion/usando-mvp-e-inversion-de-dependencias-para-abstraernos-del-framework-en-android&quot;&gt;http://www.genbetadev.com/paradigmas-de-programacion/usando-mvp-e-inversion-de-dependencias-para-abstraernos-del-framework-en-android&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://erikcaffrey.github.io/2015/11/03/mvp/&quot;&gt;https://erikcaffrey.github.io/2015/11/03/mvp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://104.168.175.144/modelo-vista-presentador-mvp-en-android/&quot;&gt;http://104.168.175.144/modelo-vista-presentador-mvp-en-android/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://www.captechconsulting.com/blogs/a-mvp-approach-to-lifecycle-safe-requests-with-retrofit-20-and-rxjava&quot;&gt;https://www.captechconsulting.com/blogs/a-mvp-approach-to-lifecycle-safe-requests-with-retrofit-20-and-rxjava&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://kmangutov.wordpress.com/2015/03/28/android-mvp-consuming-restful-apis/&quot;&gt;https://kmangutov.wordpress.com/2015/03/28/android-mvp-consuming-restful-apis/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://www.limecreativelabs.com/mvp-android/&quot;&gt;http://www.limecreativelabs.com/mvp-android/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://macoscope.com/blog/model-view-presenter-architecture-in-android-applications/&quot;&gt;http://macoscope.com/blog/model-view-presenter-architecture-in-android-applications/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://joshfischer.io/#!/sept2016&quot;&gt;http://joshfischer.io/#!/sept2016&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://mdswanson.com/blog/2013/12/16/reliable-android-http-testing-with-retrofit-and-mockito.html&quot;&gt;http://mdswanson.com/blog/2013/12/16/reliable-android-http-testing-with-retrofit-and-mockito.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://xurxodeveloper.blogspot.com.es/2014/11/pruebas-unitarias-en-android-con-mockito.html&quot;&gt;http://xurxodeveloper.blogspot.com.es/2014/11/pruebas-unitarias-en-android-con-mockito.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://unpocodejava.wordpress.com/2012/07/11/un-poco-de-mockito/&quot;&gt;https://unpocodejava.wordpress.com/2012/07/11/un-poco-de-mockito/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://es.wikipedia.org/wiki/Modelo%E2%80%93vista%E2%80%93presentador&quot;&gt;https://es.wikipedia.org/wiki/Modelo%E2%80%93vista%E2%80%93presentador&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://blackpentsoft.wordpress.com/2013/02/04/test-de-integracion-vs-test-unitarios/&quot;&gt;https://blackpentsoft.wordpress.com/2013/02/04/test-de-integracion-vs-test-unitarios/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://itblogsogeti.com/2015/03/26/desarrollo-pruebas-unitarias-trinitario-gomez-sogeti/&quot;&gt;https://itblogsogeti.com/2015/03/26/desarrollo-pruebas-unitarias-trinitario-gomez-sogeti/&lt;/a&gt;&lt;/p&gt;</content><author><name>Óscar Garrucho</name><email>oscar.garrucho@gmail.com</email></author><category term="MVP" /><category term="test unitarios" /><summary type="html">He decidido dividir esta entrada en dos entradas diferentes para que no fuese extremadamente larga y aburrida de leer. En esta primera entrada os hablaré sobre el patrón MVP y los test unitarios, tan olvidados como necesarios.</summary></entry><entry><title type="html">Base de datos con greenDao</title><link href="http://localhost:4000/2016-07-05/base-de-datos-con-greenDao" rel="alternate" type="text/html" title="Base de datos con greenDao" /><published>2016-07-05T21:14:22+02:00</published><updated>2016-07-05T21:14:22+02:00</updated><id>http://localhost:4000/2016-07-05/base-de-datos-con-greenDao</id><content type="html" xml:base="http://localhost:4000/2016-07-05/base-de-datos-con-greenDao">&lt;p&gt;Después de un tiempo con mucho trabajo y poco tiempo libre, vuelvo a escribir sobre Android, y en esta ocasión escribiré sobre &lt;a href=&quot;https://github.com/greenrobot/greenDAO&quot;&gt;greenDao&lt;/a&gt;. Si nunca has oído hablar sobre greenDao te diré que es un &lt;a href=&quot;https://es.wikipedia.org/wiki/Mapeo_objeto-relacional&quot;&gt;ORM&lt;/a&gt; open source para Android que te ayudará - y mucho - a implementar y trastear tus &lt;strong&gt;bases de datos SQLite&lt;/strong&gt; de una manera simple y sencilla, preocupándote sólo de las entidades - &lt;code class=&quot;highlighter-rouge&quot;&gt;las tablas&lt;/code&gt; - y las relaciones entre las distintas entidades existentes.&lt;/p&gt;

&lt;p&gt;No es necesario que te preocupes por cómo funciona &lt;strong&gt;greenDao&lt;/strong&gt;, simplemente preocúpate de rellenar tu base de datos con datos ;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rellenando.gif&quot; alt=&quot;rellenando&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Suena bien, ¿verdad? Pero… &lt;a href=&quot;http://greenrobot.org/greendao/features/&quot;&gt;¿cómo funciona?&lt;/a&gt; Pues gracias a dos módulos principales: &lt;strong&gt;Core&lt;/strong&gt; y &lt;strong&gt;Generator&lt;/strong&gt;. El primero de ellos irá empaquetado en tu app y el segundo te ayudará a generar las clases necesarias para interactuar con tu base de datos. Y ni siquiera tendrás que interactuar con ellas… Todo de una forma muy muy rápida.&lt;/p&gt;

&lt;p&gt;Aunque la primera vez que lo usas en un proyecto puede parecer un poco complejo; así que te explicaré brevemente como iniciar un proyecto con &lt;strong&gt;greenDao&lt;/strong&gt; en &lt;code class=&quot;highlighter-rouge&quot;&gt;Android Studio&lt;/code&gt;. Configuración inicial:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GreenDAOExample&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Package&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;greendaoexample&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minimum&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SDK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Blank&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Activity&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MainActivity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ya tenemos la configuración inicial de Android, aunque ahora necesitaremos añadir un nuevo módulo Java para la implementación de &lt;strong&gt;greenDao&lt;/strong&gt; en el proyecto. Para hacer esto selecciona “&lt;em&gt;Archivo&lt;/em&gt;” - “&lt;em&gt;Nuevo&lt;/em&gt;” - “&lt;em&gt;Nuevo módulo&lt;/em&gt;” … y elije “&lt;em&gt;librería Java&lt;/em&gt;” tal y como puedes ver en la siguiente captura:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/java_library.png&quot; alt=&quot;Java library&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Presiona en “&lt;em&gt;Siguiente&lt;/em&gt;” y llama a tu nuevo módulo &lt;code class=&quot;highlighter-rouge&quot;&gt;greendao-gen&lt;/code&gt; y a la clase Java como &lt;code class=&quot;highlighter-rouge&quot;&gt;MainGenerator&lt;/code&gt;. No hace falta modificar nada más, por tanto, presiona en “&lt;em&gt;Finalizar&lt;/em&gt;”. La estructura de tu proyecto deberá verse así:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/structure.png&quot; alt=&quot;structure&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y finalmente sólo nos queda añadir las dependencias de &lt;strong&gt;greenDao&lt;/strong&gt; en &lt;em&gt;gradle&lt;/em&gt; y ¡listo!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/facil.gif&quot; alt=&quot;baile&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Abrimos el archivo &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; y añadimos &lt;code class=&quot;highlighter-rouge&quot;&gt;compile 'de.greenrobot:greendao:2.1.0'&lt;/code&gt;. La versión 2.1.0 de greenDao es la más actual a la hora de escribir este pequeño tutorial, pero puedes comprobar la versión más reciente &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22greendao%22&quot;&gt;aquí&lt;/a&gt;. Aquí te dejo una pequeña captura de como quedan las dependencias en este ejemplo:&lt;/p&gt;

&lt;p&gt;![dependencies example](/images/dependencies.png{: .center-image }&lt;/p&gt;

&lt;p&gt;Acabamos de añadir la dependencia para nuestro &lt;strong&gt;módulo Core&lt;/strong&gt;, pero ahora necesitamos añadir las dependencias al &lt;strong&gt;módulo Generator&lt;/strong&gt;. Abrimos el archivo &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; del módulo Java que añadimos y escribimos &lt;code class=&quot;highlighter-rouge&quot;&gt;compile 'de.greenrobot:greendao-generator:2.1.0'&lt;/code&gt; (recuerda comprobar la última versión disponible &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22greendao-generator%22&quot;&gt;aquí&lt;/a&gt;). Y como siempre, captura del resultado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dependencies_gen.png&quot; alt=&quot;dependencies exampleGen&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sincronizamos todos los archivos de &lt;em&gt;gradle&lt;/em&gt; para comprobar que no tenemos errores pendientes de resolver, y por fin, es hora de escribir algo de código :)&lt;/p&gt;

&lt;p&gt;Para este tutorial he creado un par de entidades: CLIENTE y VIAJE, con una relación entre ellas de uno-a-muchas, y con algunos campos para introducir datos en las entidades. Fijaros en el detalle de definir la ruta donde irán las clases relacionadas con la base de datos.
La clase MainGenerator deberá quedarte más o menos como sigue:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;greenrobot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;daogenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DaoGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;greenrobot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;daogenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;greenrobot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;daogenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;greenrobot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;daogenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;/**
 * @author Óscar Rodríguez &amp;lt;oscar.garrucho@gmail.com&amp;gt;
 * @since 22/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/
public class MainGenerator {

    private static final String PROJECT_DIR = System.getProperty(&quot;user.dir&quot;);

    public static void main(String[] args) {

        /&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Prueba&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inicial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;para&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;las&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entidades&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;createConfigSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createConfigSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schemaVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incrementar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;en&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cada&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nueva&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualizaci&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;esquema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataPackage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;es.org.greendaoexample.data.db&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ruta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;donde&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;almacenar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;las&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clases&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entidades&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schemaVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataPackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;configSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDefaultJavaPackageDao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataPackage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.dao&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;configSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enableKeepSectionsByDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;esto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sobreescribe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ñ&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adido&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;en&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;las&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clases&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entidades&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;addTables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DaoGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generateAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PROJECT_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/app/src/main/java&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addTables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;sr&quot;&gt;/* entidades */&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Cliente&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;la&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tabla&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entidad&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addIdProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;primaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;autoincrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columna&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addStringProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dni&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addStringProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nombre&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addStringProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apellidos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puede&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ser&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addStringProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;direccion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addIntProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;edad&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viaje&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Viaje&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viaje&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addIdProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;primaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;autoincrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clienteId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viaje&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLongProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cliente_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clave&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;á&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nea&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viaje&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addStringProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;destino&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viaje&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addIntProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dias&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viaje&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addDateProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fecha_reserva&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Relaciones&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tipo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;un&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viaje&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puede&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pertenecer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;un&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;un&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puede&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realizar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varios&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viajes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;viaje&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addToOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clienteId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cliente&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addToMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viaje&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clienteId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;PROJECT_DIR es una variable inicializada con la ruta principal donde tenemos colocado nuestro proyecto. &lt;code class=&quot;highlighter-rouge&quot;&gt;scheme&lt;/code&gt; nos indica que es la primera versión de nuestra base de datos, y que se alojará en el paquete &lt;em&gt;es.org.greendaoexample.data.db&lt;/em&gt; (tienes que ir incrementando &lt;code class=&quot;highlighter-rouge&quot;&gt;scheme&lt;/code&gt; en cada actualización de la base de datos a modo de recuento), también habilitaremos &lt;a href=&quot;http://greenrobot.org/tag/keep-sections/&quot;&gt;keep sections&lt;/a&gt; para mantener la estrucutra de la base de datos en próximas actualizaciones de la misma.&lt;/p&gt;

&lt;p&gt;Después de eso crearemos la estructura de tablas (entidades) y la relación entre ellas. Una vez hecho, hacemos clic sobre la clase Maingenerator con el botón derecho y elegimos &lt;code class=&quot;highlighter-rouge&quot;&gt;Run 'MainGenerator.main()'&lt;/code&gt; , y al cabo de unos pocos segundos se generarán todas las entidades en el paquete arriba indicado con sus correspondientes relaciones entre ellas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gen_run.png&quot; alt=&quot;generator_run&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;¡Y eso es todo! ya tienes integrado greenDAO de forma correcta y sencilla en tu proyecto. Si quieres saber ahora cómo interactuar con dichas entidades y comenzar a realizar CRUD sobre tu nueva base de datos puedes echar un vistazo al &lt;a href=&quot;https://github.com/greenrobot/greenDAO/tree/master/DaoExample&quot;&gt;ejemplo que viene con greenDAO&lt;/a&gt;, o si quieres uno un poco más sencillo, te dejo en mi repositorio un &lt;a href=&quot;https://github.com/oskarko/GreenDAOExample&quot;&gt;proyecto de ejemplo&lt;/a&gt; ;)&lt;/p&gt;

&lt;p&gt;Fácil, rápido y con ejemplos, ¿necesitas más?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/notatall.gif&quot; alt=&quot;en_absoluto&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bibliografía:&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://greenrobot.org/greendao&quot;&gt;http://greenrobot.org/greendao/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://www.limecreativelabs.com/greendao-sqlite-orm-android&quot;&gt;http://www.limecreativelabs.com/greendao-sqlite-orm-android/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://blog.egorand.me/keeping-your-secrets-safe-with-greendaos-database-encryption&quot;&gt;http://blog.egorand.me/keeping-your-secrets-safe-with-greendaos-database-encryption/&lt;/a&gt;&lt;/p&gt;</content><author><name>Óscar Garrucho</name><email>oscar.garrucho@gmail.com</email></author><category term="SqLite" /><summary type="html">Después de un tiempo con mucho trabajo y poco tiempo libre, vuelvo a escribir sobre Android, y en esta ocasión escribiré sobre greenDao. Si nunca has oído hablar sobre greenDao te diré que es un ORM open source para Android que te ayudará - y mucho - a implementar y trastear tus bases de datos SQLite de una manera simple y sencilla, preocupándote sólo de las entidades - las tablas - y las relaciones entre las distintas entidades existentes.</summary></entry><entry><title type="html">NDK de android o como ejecutar código nativo en C</title><link href="http://localhost:4000/2016-05-04/NDK-de-android-o-como-ejecutar-codigo-nativo-en-C" rel="alternate" type="text/html" title="NDK de android o como ejecutar código nativo en C" /><published>2016-05-04T23:09:22+02:00</published><updated>2016-05-04T23:09:22+02:00</updated><id>http://localhost:4000/2016-05-04/NDK-de-android-o-como-ejecutar-codigo-nativo-en-C</id><content type="html" xml:base="http://localhost:4000/2016-05-04/NDK-de-android-o-como-ejecutar-codigo-nativo-en-C">&lt;p&gt;Los desarrolladores pueden, mediante el Android NDK (&lt;a href=&quot;https://developer.android.com/intl/es/tools/sdk/ndk/index.html&quot;&gt;Native Development Kit&lt;/a&gt;), reutilizar código escrito en C/C++ haciendo uso de ello a través del JNI (&lt;a href=&quot;http://developer.android.com/intl/es/training/articles/perf-jni.html&quot;&gt;Java Native Interface&lt;/a&gt;). El NDK hace que la ejecución de la aplicación sea directamente en el procesador y no será interpretado mediante una máquina virtual, siendo común en aplicaciones que hagan un uso intensivo de la CPU mediante complejas operaciones matemáticas. En algunas ocasiones esto puede traducirse en una ejecución de la app más rápida.&lt;/p&gt;

&lt;p&gt;El uso de código nativo en android no está al alcance de todos, y su uso es, cuanto menos, difícil de manejar. Realmente no aporta grandes mejores o diferencias respecto a código android, por lo que,  a no ser que no nos quede más remedio, deberemos de sopesar su implementación. Aplicaciones como Whatsapp o Skype utilizan el NDK de android, ¿curioso, verdad?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/friends1.gif&quot; alt=&quot;Ahhhmmmm&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Manos a la obra, lo primero que deberemos hacer será &lt;a href=&quot;https://developer.android.com/intl/es/ndk/downloads/index.html&quot;&gt;descargar el NDK de android&lt;/a&gt; según cual sea nuestro SO; descargadlo y descomprimidlo; yo he renombrado la carpeta como ndk, simplemente. Ahora la copiaremos al directorio donde tengamos instalado el SDK de android y la añadiremos al PATH.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndk&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/Users/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Oskarko&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Android&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Oskarko&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ndk&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;El último paso sería compilar el código nativo mediante el NDK de android, para ello navegamos a la raíz de nuestro proyecto y lo compilamos con el comando &lt;code class=&quot;highlighter-rouge&quot;&gt;ndk-build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Como proyecto de ejemplo he tomado prestado el visor de PDF de los chicos de &lt;a href=&quot;https://code.google.com/archive/p/apv/&quot;&gt;APV PDF Viewer&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;python2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pjpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/scripts/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    
    &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ndk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Después de descomprimir el proyecto y ejecutar &lt;a href=&quot;https://code.google.com/archive/p/apv/wikis/Building.wiki&quot;&gt;algún comando en Python&lt;/a&gt;, compilo el código mediante &lt;code class=&quot;highlighter-rouge&quot;&gt;ndk-build&lt;/code&gt; para generar las librerías &lt;code class=&quot;highlighter-rouge&quot;&gt;*.so&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lib_apv.png&quot; alt=&quot;Carpeta LIBS&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez copiadas a la carpeta &lt;code class=&quot;highlighter-rouge&quot;&gt;libs&lt;/code&gt; de Android Studio tan sólo tendremos que darle a Gradle todo lo que nos pida hasta conseguir compilar la app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/friends2.gif&quot; alt=&quot;Dandole a Gradle lo que te pide&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Puedes descargar el proyecto completo desde &lt;a href=&quot;https://github.com/oskarko/APVExample&quot;&gt;mi repositorio de GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bibliografía:&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://code.google.com/archive/p/apv/wikis/Building.wiki&quot;&gt;https://code.google.com/archive/p/apv/wikis/Building.wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://geekytheory.com/que-es-el-android-ndk-parte-1/&quot;&gt;https://geekytheory.com/que-es-el-android-ndk-parte-1/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://geekytheory.com/instalacion-del-android-ndk-parte-2/&quot;&gt;https://geekytheory.com/instalacion-del-android-ndk-parte-2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://geekytheory.com/hola-mundo-con-android-ndk-parte-4/&quot;&gt;https://geekytheory.com/hola-mundo-con-android-ndk-parte-4/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://geekytheory.com/paso-de-parametros-en-funciones-con-android-ndk-parte-5/&quot;&gt;https://geekytheory.com/paso-de-parametros-en-funciones-con-android-ndk-parte-5/&lt;/a&gt;&lt;/p&gt;</content><author><name>Óscar Garrucho</name><email>oscar.garrucho@gmail.com</email></author><category term="NDK" /><summary type="html">Los desarrolladores pueden, mediante el Android NDK (Native Development Kit), reutilizar código escrito en C/C++ haciendo uso de ello a través del JNI (Java Native Interface). El NDK hace que la ejecución de la aplicación sea directamente en el procesador y no será interpretado mediante una máquina virtual, siendo común en aplicaciones que hagan un uso intensivo de la CPU mediante complejas operaciones matemáticas. En algunas ocasiones esto puede traducirse en una ejecución de la app más rápida.</summary></entry><entry><title type="html">Implementando un Event Bus con RxAndroid</title><link href="http://localhost:4000/2016-03-20/implementando-un-eventbus-con-rxandroid" rel="alternate" type="text/html" title="Implementando un Event Bus con RxAndroid" /><published>2016-03-20T13:05:22+01:00</published><updated>2016-03-20T13:05:22+01:00</updated><id>http://localhost:4000/2016-03-20/implementando-un-eventbus-con-rxandroid</id><content type="html" xml:base="http://localhost:4000/2016-03-20/implementando-un-eventbus-con-rxandroid">&lt;p&gt;Una de las rutinas más tediosas a la hora de crear una app es la implementación de la  comunicación entre las distintas partes de las que se compone dicha app (actividades, fragmentos, servicios…). Que si métodos de Callback, que si AsyncTask, intents, y aún así, nunca estamos a salvo de ser sorprendidos por un &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html&quot;&gt;NPE&lt;/a&gt; al eliminarnos el recolector de basuras de Android una actividad en el momento menos oportuno.&lt;/p&gt;

&lt;p&gt;Para solucionar este quebradero de cabeza podemos usar un modelo de Event Bus para simplificar todas la comunicaciones internas de nuestra app. Pero, ¿qué es un Event Bus? El modelo de Event Bus se encarga de la transmisión de Objetos Java entre actividades, fragmentos y servicios, y además, de una manera fácil y limpia.&lt;/p&gt;

&lt;p&gt;Hay varios framework que funcionan como Event Bus: &lt;a href=&quot;https://github.com/greenrobot/EventBus&quot;&gt;EventBus de greenRobot&lt;/a&gt;, &lt;a href=&quot;http://square.github.io/otto/&quot;&gt;Otto de Square&lt;/a&gt; y &lt;a href=&quot;https://github.com/ReactiveX/RxAndroid&quot;&gt;RxAndroid&lt;/a&gt; entre varios otros. Para nuestro ejemplo usaremos RxAndroid, que entre sus muchas funciones, una de ellas es poder actuar en un modelado de Event Bus.&lt;/p&gt;

&lt;p&gt;El modelo de Event Bus se compone de cuatro piezas fundamentales: un &lt;code class=&quot;highlighter-rouge&quot;&gt;bus&lt;/code&gt; o canal de comunicación, un &lt;code class=&quot;highlighter-rouge&quot;&gt;evento&lt;/code&gt; o clase POJO que se enviará a través del bus, un &lt;code class=&quot;highlighter-rouge&quot;&gt;publisher&lt;/code&gt; que enviará dichos eventos y uno o varios &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribers&lt;/code&gt; que recibirán los eventos.&lt;/p&gt;

&lt;p&gt;En nuestro ejemplo tendremos una única actividad que contendrá dos fragmentos en su interior ejecutandose a la misma vez. Uno de esos fragmentos contendrá un botón, que al hacer ‘clik’ sobre él lanzará un evento que se recibirá en el segundo fragmento, y al recibirlo, lanzará un simple SnackBar que se mostrará en la actividad principal.&lt;/p&gt;

&lt;p&gt;Primero necesitaremos añadir las dependencias de RxAndroid a gradle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'io.reactivex:rxandroid:1.1.0'&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Definiremos nuestra clase bus con un método para enviar eventos y otro para “recibirlos”. Su implementación es bastante sencilla.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RxBus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;_bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SerializedSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PublishSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toObserverable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;El evento que enviaremos en nuestro ejemplo será un simple objeto Java que contendrá un String como atributo. El “publisher” será el botón contenido en el primer fragmento. Al clickar sobre él se ejecutará uno de los dos métodos implementados en nuestra clase bus, por tanto, debemos de registrarnos en dicha clase y a través de ella enviar nuestro evento POJO.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;mButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                
                &lt;span class=&quot;n&quot;&gt;_rxBus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OskarkoEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sólo tendremos un “subscriber” en este ejemplo. Estará a la escucha de recibir los eventos en el segundo fragmento, y publicará en la actividad principal el texto que contendrá el evento en su interior.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;_subscriptions&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rxBus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toObserverable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Action1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;vi&quot;&gt;@Override&lt;/span&gt;
                    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OskarkoEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;no&quot;&gt;Snackbar&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OskarkoEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
                                    &lt;span class=&quot;no&quot;&gt;Snackbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Así que, finalmente, tenemos dos fragmentos cargados en la actividad principal, y al clickar sobre el botón del primer fragmento, con la implementación de un Event Bus con RxAndroid, el segundo fragmento recibirá el evento con muy pocas líneas de código, sin interfaces con métodos de Callback, sin intents, sin AsyncTask… cómodo y sencillo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rxbusexample2.jpg&quot; alt=&quot;Actividad mostrando SnackBar&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hay que tener en cuenta algunos aspectos antes de usar un modelo de Event Bus:&lt;/p&gt;

&lt;p&gt;– No creas que siempre será mejor sustituir un patrón de comunicación con el modelo de Event Bus. Una AsyncTask o un simple listener serán una mejor opción en muchas ocasiones. Imagina el ejemplo de un “subscriber” que actuará como “publisher” a la vez con un mismo evento. La depuración puede llegar a ser casi imposible.&lt;/p&gt;

&lt;p&gt;– No olvides registrar y desregistrar tus “publishers” y “subscribers” para no hacer un acopio innecesario de memoria, de lo contrario tu app podría no discurrir de la forma que esperas. Haz la prueba ;-)&lt;/p&gt;

&lt;p&gt;– Recuerda que un “subscriber” que está contenido en una actividad o un fragmento que es nulo en un momento determinado no llegará a recibir nunca ese evento. Con la librería EventBus de greenRobot hay una forma de que sí puedan recibirlos, pero con RxAndroid y Otto, NO.&lt;/p&gt;

&lt;p&gt;Puedes descargar el proyecto completo desde &lt;a href=&quot;https://github.com/oskarko/RxAndroidExample&quot;&gt;mi repositorio de GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/minions.gif&quot; alt=&quot;Minions aplaudiendo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bibliografía:&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://nerds.weddingpartyapp.com/tech/2014/12/24/implementing-an-event-bus-with-rxjava-rxbus/&quot;&gt;http://nerds.weddingpartyapp.com/tech/2014/12/24/implementing-an-event-bus-with-rxjava-rxbus/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://github.com/kaushikgopal/RxJava-Android-Samples&quot;&gt;https://github.com/kaushikgopal/RxJava-Android-Samples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://aaronliew.github.io/blog/2015/04/15/rxandroid/&quot;&gt;http://aaronliew.github.io/blog/2015/04/15/rxandroid/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://guides.codepath.com/android/Communicating-with-an-Event-Bus&quot;&gt;https://guides.codepath.com/android/Communicating-with-an-Event-Bus&lt;/a&gt;&lt;/p&gt;</content><author><name>Óscar Garrucho</name><email>oscar.garrucho@gmail.com</email></author><category term="RxAndroid" /><summary type="html">Una de las rutinas más tediosas a la hora de crear una app es la implementación de la comunicación entre las distintas partes de las que se compone dicha app (actividades, fragmentos, servicios…). Que si métodos de Callback, que si AsyncTask, intents, y aún así, nunca estamos a salvo de ser sorprendidos por un NPE al eliminarnos el recolector de basuras de Android una actividad en el momento menos oportuno.</summary></entry></feed>